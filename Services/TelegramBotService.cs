using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using QuizTelegramApp.Data;
using QuizTelegramApp.Models;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Telegram.Bot.Exceptions;

namespace QuizTelegramApp.Services;

public class TelegramBotService : BackgroundService
{
    private readonly ITelegramBotClient _botClient;
    private readonly IDbContextFactory _dbContextFactory;
    private readonly ILogger<TelegramBotService> _logger;
    private readonly HttpClient _httpClient;
    private readonly Dictionary<long, UserState> _userStates = new();
    private const int MaxRetries = 3;
    private const int RetryDelayMs = 1000;

    public TelegramBotService(
        ITelegramBotClient botClient,
        IDbContextFactory dbContextFactory,
        ILogger<TelegramBotService> logger,
        HttpClient httpClient)
    {
        _botClient = botClient;
        _dbContextFactory = dbContextFactory;
        _logger = logger;
        _httpClient = httpClient;
        _httpClient.Timeout = TimeSpan.FromSeconds(30);
    }

    private ApplicationDbContext CreateDbContext()
    {
        return _dbContextFactory.CreateDbContext();
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        try
        {
            var me = await _botClient.GetMeAsync(stoppingToken);
            _logger.LogInformation("–ë–æ—Ç {BotName} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", me.Username);

            // –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º getUpdates
            await _botClient.DeleteWebhookAsync(cancellationToken: stoppingToken);

            _botClient.StartReceiving(
                updateHandler: HandleUpdateAsync,
                pollingErrorHandler: HandlePollingErrorAsync,
                cancellationToken: stoppingToken
            );

            await Task.Delay(-1, stoppingToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞");
            throw;
        }
    }

    private async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        try
        {
            if (update.CallbackQuery != null)
            {
                await HandleCallbackQueryAsync(update.CallbackQuery);
                return;
            }

            if (update.Message?.Text == null)
            {
                _logger.LogWarning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è");
                return;
            }

            var chatId = update.Message.Chat.Id;
            var messageText = update.Message.Text;

            _logger.LogInformation("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {Message} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", messageText, chatId);

            switch (messageText)
            {
                case "/start":
                    await HandleStartCommand(chatId);
                    break;

                case "/quizzes":
                    await HandleQuizzesCommand(chatId);
                    break;

                case "/leaderboard":
                    await HandleLeaderboardCommand(chatId);
                    break;

                case "/app":
                    await HandleAppCommand(chatId);
                    break;

                default:
                    if (messageText.StartsWith("/quiz_"))
                    {
                        var quizId = int.Parse(messageText.Split('_')[1]);
                        await HandleQuizSelection(chatId, quizId);
                    }
                    else if (messageText == "completed")
                    {
                        await SendMessageWithRetry(chatId, "–≠—Ç–æ—Ç –∫–≤–∏–∑ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–≤–∏–∑.");
                    }
                    else
                    {
                        await SendMessageWithRetry(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.");
                    }
                    break;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
            if (update.Message?.Chat.Id != null)
            {
                await SendMessageWithRetry(update.Message.Chat.Id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        }
    }

    private async Task SendMessageWithRetry(long chatId, string text, IReplyMarkup? replyMarkup = null)
    {
        for (int i = 0; i < MaxRetries; i++)
        {
            try
            {
                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: text,
                    replyMarkup: replyMarkup,
                    parseMode: ParseMode.Html
                );
                return;
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "–ü–æ–ø—ã—Ç–∫–∞ {Attempt} –∏–∑ {MaxRetries} –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–∞—Å—å", i + 1, MaxRetries);
                if (i < MaxRetries - 1)
                {
                    await Task.Delay(RetryDelayMs * (i + 1));
                }
                else
                {
                    _logger.LogError(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {MaxRetries} –ø–æ–ø—ã—Ç–æ–∫", MaxRetries);
                    throw;
                }
            }
        }
    }

    private async Task HandleStartCommand(long chatId)
    {
        var message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Quiz App! üéØ\n\n" +
                     "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                     "/quizzes - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–∏–∑–æ–≤\n" +
                     "/leaderboard - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n" +
                     "/app - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithWebApp(
                    "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    new WebAppInfo { Url = "https://your-mini-app-url.com" })
            }
        });

        await SendMessageWithRetry(chatId, message, keyboard);
    }

    private async Task HandleQuizzesCommand(long chatId)
    {
        try 
        {
            using var context = CreateDbContext();
            var quizzes = await context.Quizzes.ToListAsync();
            
            if (!quizzes.Any())
            {
                await SendMessageWithRetry(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–∏–∑–æ–≤.");
                return;
            }

            var user = await context.Users.FirstOrDefaultAsync(u => u.TelegramId == chatId);
            var completedQuizIds = new HashSet<int>();
            
            if (user != null)
            {
                completedQuizIds = new HashSet<int>(await context.QuizResults
                    .Where(r => r.UserId == user.Id)
                    .Select(r => r.QuizId)
                    .ToListAsync());
            }

            var quizButtons = quizzes.Select(q => new[]
            {
                InlineKeyboardButton.WithCallbackData(
                    $"{q.Title} {(completedQuizIds.Contains(q.Id) ? "‚úÖ" : "")}",
                    completedQuizIds.Contains(q.Id) ? "completed" : $"/quiz_{q.Id}")
            }).ToList();

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            quizButtons.Add(new[]
            {
                InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
            });

            var keyboard = new InlineKeyboardMarkup(quizButtons);

            await SendMessageWithRetry(
                chatId,
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∏–∑:\n(‚úÖ - –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∫–≤–∏–∑—ã)",
                replyMarkup: keyboard);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /quizzes");
            await SendMessageWithRetry(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–≤–∏–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private async Task HandleLeaderboardCommand(long chatId)
    {
        try
        {
            using var context = CreateDbContext();
            var quizzes = await context.Quizzes.ToListAsync();

            if (!quizzes.Any())
            {
                await SendMessageWithRetry(chatId, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–∏–∑–æ–≤.");
                return;
            }

            var quizButtons = quizzes.Select(q => new[]
            {
                InlineKeyboardButton.WithCallbackData(q.Title, $"leaderboard_{q.Id}")
            }).ToList();

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            quizButtons.Add(new[]
            {
                InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
            });

            var keyboard = new InlineKeyboardMarkup(quizButtons);

            await SendMessageWithRetry(
                chatId,
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∏–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:",
                replyMarkup: keyboard);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–≤–∏–∑–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {Error}", ex.Message);
            await SendMessageWithRetry(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–≤–∏–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private async Task ShowQuizLeaderboard(long chatId, int quizId)
    {
        try
        {
            using var context = CreateDbContext();
            var quiz = await context.Quizzes.FirstOrDefaultAsync(q => q.Id == quizId);
            if (quiz == null)
            {
                await SendMessageWithRetry(chatId, "–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

            var allResults = await context.QuizResults
                .Include(r => r.User)
                .Where(r => r.QuizId == quizId)
                .ToListAsync();

            var results = allResults
                .GroupBy(r => r.UserId)
                .Select(g => g.OrderByDescending(r => r.Score).First())
                .OrderByDescending(r => r.Score)
                .Take(10)
                .ToList();

            if (!results.Any())
            {
                await SendMessageWithRetry(chatId, $"–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ \"{quiz.Title}\".");
                return;
            }

            var message = $"üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤: {quiz.Title}\n\n" +
                         string.Join("\n", results.Select((r, i) =>
                             $"{i + 1}. {r.User?.Username ?? "–ê–Ω–æ–Ω–∏–º"} - {r.Score} –±–∞–ª–ª–æ–≤"));

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–≤–∏–∑–æ–≤", "back_to_leaderboards") },
                new[] { InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu") }
            });

            await SendMessageWithRetry(chatId, message, keyboard);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞: {Error}", ex.Message);
            await SendMessageWithRetry(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private async Task HandleQuizSelection(long chatId, int quizId)
    {
        try
        {
            using var context = CreateDbContext();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –∫–≤–∏–∑
            var user = await context.Users.FirstOrDefaultAsync(u => u.TelegramId == chatId);
            if (user != null)
            {
                var hasAttempt = await context.QuizResults
                    .AnyAsync(r => r.UserId == user.Id && r.QuizId == quizId);
                
                if (hasAttempt)
                {
                    await SendMessageWithRetry(chatId, "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç –∫–≤–∏–∑. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–≤–∏–∑ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /quizzes");
                    return;
                }
            }

            var quiz = await context.Quizzes
                .Include(q => q.Questions)
                .ThenInclude(q => q.QuestionOptions)
                .FirstOrDefaultAsync(q => q.Id == quizId);

            if (quiz == null)
            {
                _logger.LogWarning("–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. ID: {QuizId}", quizId);
                await SendMessageWithRetry(chatId, "–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

            var firstQuestion = quiz.Questions.OrderBy(q => q.Id).FirstOrDefault();
            if (firstQuestion == null)
            {
                _logger.LogWarning("–í –∫–≤–∏–∑–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. ID: {QuizId}", quizId);
                await SendMessageWithRetry(chatId, "–í —ç—Ç–æ–º –∫–≤–∏–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.");
                return;
            }

            await HandleQuestion(chatId, firstQuestion);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–≤–∏–∑–∞");
            await SendMessageWithRetry(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private async Task HandleAnswer(long chatId, int quizId, int questionId, string answer, string username)
    {
        try
        {
            using var context = CreateDbContext();
            var quiz = await context.Quizzes
                .Include(q => q.Questions)
                .ThenInclude(q => q.QuestionOptions)
                .FirstOrDefaultAsync(q => q.Id == quizId);

            if (quiz == null)
            {
                _logger.LogWarning("–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. ID: {QuizId}", quizId);
                await SendMessageWithRetry(chatId, "–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

            var currentQuestion = quiz.Questions.FirstOrDefault(q => q.Id == questionId);
            if (currentQuestion == null)
            {
                _logger.LogWarning("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. ID: {QuestionId}", questionId);
                await SendMessageWithRetry(chatId, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            var user = await context.Users.FirstOrDefaultAsync(u => u.TelegramId == chatId);
            if (user == null)
            {
                user = new Models.User 
                { 
                    Username = username,
                    TelegramId = chatId
                };
                context.Users.Add(user);
                await context.SaveChangesAsync();
            }

            var answerEntity = new Models.Answer
            {
                QuestionId = questionId,
                UserId = user.Id,
                Text = answer,
                IsCorrect = answer == currentQuestion.CorrectAnswer,
                Question = currentQuestion,
                User = user
            };
            context.Answers.Add(answerEntity);
            await context.SaveChangesAsync();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!_userStates.TryGetValue(chatId, out var state))
            {
                state = new UserState
                {
                    CurrentQuizId = quizId,
                    CurrentQuestionId = questionId,
                    Score = 0
                };
            }

            if (answer == currentQuestion.CorrectAnswer)
            {
                state.Score++;
            }

            _userStates[chatId] = state;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
            var isCorrect = answer == currentQuestion.CorrectAnswer;
            await SendMessageWithRetry(
                chatId,
                isCorrect ? "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" : $"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {currentQuestion.CorrectAnswer ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}"
            );

            // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            var questions = quiz.Questions.OrderBy(q => q.Id).ToList();
            var currentIndex = questions.FindIndex(q => q.Id == questionId);
            var nextQuestion = currentIndex < questions.Count - 1 ? questions[currentIndex + 1] : null;

            if (nextQuestion != null)
            {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                state.CurrentQuestionId = nextQuestion.Id;
                _userStates[chatId] = state;

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                await HandleQuestion(chatId, nextQuestion);
            }
            else
            {
                // –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await FinishQuizAsync(chatId);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {Error}", ex.Message);
            await SendMessageWithRetry(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private async Task SendLeaderboard(long chatId, int quizId)
    {
        using var context = CreateDbContext();
        var results = await context.QuizResults
            .Include(r => r.User)
            .Include(r => r.Quiz)
            .Where(r => r.QuizId == quizId)
            .OrderByDescending(r => r.Score)
            .Take(10)
            .ToListAsync();

        if (!results.Any())
        {
            await _botClient.SendTextMessageAsync(chatId, "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–≤–∏–∑–∞.");
            return;
        }

        var message = "üèÜ –¢–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n\n";
        for (int i = 0; i < results.Count; i++)
        {
            var result = results[i];
            message += $"{i + 1}. {result.User?.Username ?? "–ê–Ω–æ–Ω–∏–º"}: {result.Score}/{result.Quiz?.Questions?.Count ?? 0}\n";
        }

        await _botClient.SendTextMessageAsync(chatId, message);
    }

    private async Task SaveQuizResult(Models.User user, Quiz quiz, int score)
    {
        try
        {
            using var context = CreateDbContext();
            var result = new QuizResult
            {
                UserId = user.Id,
                User = user,
                QuizId = quiz.Id,
                Quiz = quiz,
                Score = score,
                CompletedAt = DateTime.UtcNow
            };

            await context.QuizResults.AddAsync(result);
            await context.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞");
            throw;
        }
    }

    private async Task HandleQuestion(long chatId, Question question)
    {
        try
        {
            if (question == null)
            {
                _logger.LogWarning("–ü–æ–ª—É—á–µ–Ω null –≤–æ–ø—Ä–æ—Å –¥–ª—è chatId: {ChatId}", chatId);
                await SendMessageWithRetry(chatId, "–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            using var context = CreateDbContext();
            var loadedQuestion = await context.Questions
                .Include(q => q.QuestionOptions)
                .FirstOrDefaultAsync(q => q.Id == question.Id);

            if (loadedQuestion == null)
            {
                _logger.LogWarning("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. ID: {QuestionId}", question.Id);
                await SendMessageWithRetry(chatId, "–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            string[] options;
            if (loadedQuestion.QuestionOptions != null && loadedQuestion.QuestionOptions.Any())
            {
                options = loadedQuestion.QuestionOptions
                    .Where(o => !string.IsNullOrEmpty(o.Text))
                    .Select(o => o.Text)
                    .ToArray();
            }
            else if (!string.IsNullOrEmpty(loadedQuestion.Options))
            {
                try
                {
                    options = System.Text.Json.JsonSerializer.Deserialize<string[]>(loadedQuestion.Options) ?? Array.Empty<string>();
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: {Error}", ex.Message);
                    options = loadedQuestion.Options
                        .Split(',')
                        .Select(o => o.Trim())
                        .Where(o => !string.IsNullOrEmpty(o))
                        .ToArray();
                }
            }
            else
            {
                _logger.LogWarning("–£ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞. ID: {QuestionId}", loadedQuestion.Id);
                await SendMessageWithRetry(chatId, "–û—à–∏–±–∫–∞: —É –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.");
                return;
            }

            if (options == null || !options.Any())
            {
                _logger.LogWarning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤. ID: {QuestionId}", loadedQuestion.Id);
                await SendMessageWithRetry(chatId, "–û—à–∏–±–∫–∞: —É –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.");
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            var keyboard = new InlineKeyboardMarkup(
                options.Select(o => new[]
                {
                    InlineKeyboardButton.WithCallbackData(
                        o,
                        $"answer_{loadedQuestion.QuizId}_{loadedQuestion.Id}_{o}")
                }));

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            await SendMessageWithRetry(
                chatId: chatId,
                text: loadedQuestion.Text ?? "–í–æ–ø—Ä–æ—Å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞",
                replyMarkup: keyboard
            );
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {Error}", ex.Message);
            await SendMessageWithRetry(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private async Task HandleCallbackQueryAsync(CallbackQuery callbackQuery)
    {
        if (callbackQuery?.Data == null || callbackQuery.Message?.Chat == null)
        {
            _logger.LogWarning("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback query");
            return;
        }

        var chatId = callbackQuery.Message.Chat.Id;
        var messageId = callbackQuery.Message.MessageId;

        try
        {
            if (callbackQuery.Data == "main_menu")
            {
                await HandleStartCommand(chatId);
            }
            else if (callbackQuery.Data.StartsWith("leaderboard_"))
            {
                var quizId = int.Parse(callbackQuery.Data.Split('_')[1]);
                await ShowQuizLeaderboard(chatId, quizId);
            }
            else if (callbackQuery.Data == "back_to_leaderboards")
            {
                await HandleLeaderboardCommand(chatId);
            }
            else if (callbackQuery.Data.StartsWith("answer_"))
            {
                var parts = callbackQuery.Data.Split('_');
                if (parts.Length != 4)
                {
                    _logger.LogWarning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data: {Data}", callbackQuery.Data);
                    await SendMessageWithRetry(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                    return;
                }

                var quizId = int.Parse(parts[1]);
                var questionId = int.Parse(parts[2]);
                var answer = parts[3];
                var username = callbackQuery.From?.Username ?? "Anonymous";
                await HandleAnswer(chatId, quizId, questionId, answer, username);
            }
            else if (callbackQuery.Data.StartsWith("/quiz_"))
            {
                var quizId = int.Parse(callbackQuery.Data.Split('_')[1]);
                await StartQuizAsync(chatId, quizId);
            }

            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query: {Error}", ex.Message);
            await SendMessageWithRetry(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private async Task StartQuizAsync(long chatId, int quizId)
    {
        try
        {
            using var context = CreateDbContext();
            var quiz = await context.Quizzes
                .Include(q => q.Questions)
                .ThenInclude(q => q.QuestionOptions)
                .FirstOrDefaultAsync(q => q.Id == quizId);

            if (quiz == null)
            {
                _logger.LogWarning("–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. ID: {QuizId}", quizId);
                await SendMessageWithRetry(chatId, "–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

            if (quiz.Questions == null || !quiz.Questions.Any())
            {
                _logger.LogWarning("–í –∫–≤–∏–∑–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. ID: {QuizId}", quizId);
                await SendMessageWithRetry(chatId, "–í —ç—Ç–æ–º –∫–≤–∏–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.");
                return;
            }

            var firstQuestion = quiz.Questions.OrderBy(q => q.Id).FirstOrDefault();
            if (firstQuestion == null)
            {
                _logger.LogWarning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å. ID: {QuizId}", quizId);
                await SendMessageWithRetry(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.");
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            _userStates[chatId] = new UserState
            {
                CurrentQuizId = quizId,
                CurrentQuestionId = firstQuestion.Id,
                Score = 0
            };

            await HandleQuestion(chatId, firstQuestion);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–≤–∏–∑–∞: {Error}", ex.Message);
            await SendMessageWithRetry(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–≤–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private async Task HandleAnswerAsync(long chatId, int answerId)
    {
        try
        {
            if (!_userStates.TryGetValue(chatId, out var state))
            {
                await SendMessageWithRetry(chatId, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∏–∑.");
                return;
            }

            using var context = CreateDbContext();
            var answer = await context.Answers
                .Include(a => a.Question)
                .FirstOrDefaultAsync(a => a.Id == answerId);

            if (answer == null)
            {
                await SendMessageWithRetry(chatId, "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

            if (answer.QuestionId != state.CurrentQuestionId)
            {
                await SendMessageWithRetry(chatId, "–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.");
                return;
            }

            state.CurrentAnswers.Add(answer);
            if (answer.IsCorrect)
            {
                state.Score++;
            }

            await SendMessageWithRetry(
                chatId,
                answer.IsCorrect ? "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" : $"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer.Question?.CorrectAnswer ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}"
            );

            await SendNextQuestionAsync(chatId, answer.QuestionId);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞");
            await SendMessageWithRetry(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private async Task SendNextQuestionAsync(long chatId, int currentQuestionId)
    {
        try
        {
            if (!_userStates.TryGetValue(chatId, out var state))
            {
                await SendMessageWithRetry(chatId, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∏–∑.");
                return;
            }

            using var context = CreateDbContext();
            var quiz = await context.Quizzes
                .Include(q => q.Questions)
                .FirstOrDefaultAsync(q => q.Id == state.CurrentQuizId);

            if (quiz == null)
            {
                await SendMessageWithRetry(chatId, "–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

            var questions = quiz.Questions.ToList();
            var currentIndex = questions.FindIndex(q => q.Id == currentQuestionId);
            var nextQuestion = currentIndex < questions.Count - 1 ? questions[currentIndex + 1] : null;

            if (nextQuestion != null)
            {
                state.CurrentQuestionId = nextQuestion.Id;
                await HandleQuestion(chatId, nextQuestion);
            }
            else
            {
                await FinishQuizAsync(chatId);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞");
            await SendMessageWithRetry(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private async Task FinishQuizAsync(long chatId)
    {
        try
        {
            if (!_userStates.TryGetValue(chatId, out var state))
            {
                await SendMessageWithRetry(chatId, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∏–∑.");
                return;
            }

            using var context = CreateDbContext();
            var quiz = await context.Quizzes
                .Include(q => q.Questions)
                .FirstOrDefaultAsync(q => q.Id == state.CurrentQuizId);

            if (quiz == null)
            {
                await SendMessageWithRetry(chatId, "–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

            var user = await context.Users.FirstOrDefaultAsync(u => u.TelegramId == chatId);
            if (user == null)
            {
                user = new Models.User { TelegramId = chatId };
                context.Users.Add(user);
                await context.SaveChangesAsync();
            }

            var result = new QuizResult
            {
                UserId = user.Id,
                QuizId = quiz.Id,
                Score = state.Score,
                CompletedAt = DateTime.UtcNow
            };

            context.QuizResults.Add(result);
            await context.SaveChangesAsync();

            var message = $"üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n" +
                         $"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {state.Score} –∏–∑ {quiz.Questions.Count} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n" +
                         $"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {(state.Score * 100.0 / quiz.Questions.Count):F1}%";

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu") }
            });

            await SendMessageWithRetry(chatId, message, keyboard);
            _userStates.Remove(chatId);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–∏–∑–∞");
            await SendMessageWithRetry(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private async Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
    {
        var errorMessage = exception switch
        {
            ApiRequestException apiRequestException
                => $"Telegram API Error:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}",
            _ => exception.ToString()
        };

        _logger.LogError(errorMessage);
        await Task.Delay(1000, cancellationToken);
    }

    private async Task HandleAppCommand(long chatId)
    {
        try
        {
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithWebApp(
                        "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        new WebAppInfo { Url = "https://amvera-drrexar-run-quizbott.amvera.io" })
                }
            });

            await SendMessageWithRetry(
                chatId,
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
                keyboard);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /app");
            await SendMessageWithRetry(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
} 